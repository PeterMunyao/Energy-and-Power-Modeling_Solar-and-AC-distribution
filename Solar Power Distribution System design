import math  # Import math module (not currently used, but useful for future calculations)

# -------------------------------
# Calculation Functions
# -------------------------------

# Function to calculate load current in an AC system
def calculate_load_current(load_power, ac_voltage, power_factor):
    """
    Calculate the load current for an AC circuit.

    Parameters:
    - load_power (W): Power rating of the load in watts.
    - ac_voltage (V): Applied AC voltage.
    - power_factor: Power factor of the system.

    Returns:
    - Load current (A).
    """
    return load_power / (ac_voltage * power_factor)

# Function to calculate the allowable voltage drop
def calculate_voltage_drop(ac_voltage, percentage_drop):
    """
    Calculate the maximum allowable voltage drop.

    Parameters:
    - ac_voltage (V): Applied AC voltage.
    - percentage_drop (%): Allowable voltage drop as a percentage.

    Returns:
    - Voltage drop (V).
    """
    return (percentage_drop / 100) * ac_voltage

# Function to calculate total conductor resistance
def calculate_conductor_resistance(voltage_drop, load_current):
    """
    Calculate the resistance of the conductor.

    Parameters:
    - voltage_drop (V): Maximum allowable voltage drop.
    - load_current (A): Load current.

    Returns:
    - Conductor resistance (Ω) for the entire round-trip length.
    """
    return voltage_drop / load_current

# Function to calculate the required conductor cross-sectional area
def calculate_conductor_area(resistivity, conductor_length, resistance):
    """
    Calculate the minimum required conductor cross-sectional area.

    Parameters:
    - resistivity (Ω·m): Electrical resistivity of the conductor material.
    - conductor_length (m): One-way conductor length.
    - resistance (Ω): Total resistance of the conductor.

    Returns:
    - Conductor cross-sectional area (m²).
    """
    return (resistivity * conductor_length * 2) / resistance  # Multiply by 2 to account for round-trip length

# Function to determine the breaker rating with a safety margin
def calculate_breaker_rating(load_current, safety_margin=1.25):
    """
    Calculate the appropriate breaker rating.

    Parameters:
    - load_current (A): Actual current drawn by the load.
    - safety_margin: Safety factor (default is 1.25).

    Returns:
    - Recommended breaker rating (A).
    """
    return safety_margin * load_current  # 25% safety margin applied

# Function to calculate power loss in the conductor
def calculate_power_loss(load_current, conductor_resistance):
    """
    Calculate power loss due to conductor resistance.

    Parameters:
    - load_current (A): Current flowing through the conductor.
    - conductor_resistance (Ω): Total resistance of the conductor.

    Returns:
    - Power loss (W).
    """
    return load_current ** 2 * conductor_resistance  # Power loss formula: P = I²R

# Function to calculate system efficiency
def calculate_efficiency(output_power, input_power):
    """
    Calculate the efficiency of the electrical system.

    Parameters:
    - output_power (W): Power delivered to the load.
    - input_power (W): Total power including losses.

    Returns:
    - Efficiency (%).
    """
    return (output_power / input_power) * 100

# Function to calculate the ground fault current
def calculate_ground_fault_current(ac_voltage, ground_impedance):
    """
    Calculate the ground fault current based on system voltage and impedance.

    Parameters:
    - ac_voltage (V): System voltage.
    - ground_impedance (Ω): Impedance of the ground fault path.

    Returns:
    - Ground fault current (A).
    """
    return ac_voltage / ground_impedance  # Ohm's law: I = V / Z

# Function to calculate the residential breaker size for TN-C-S systems
def calculate_residential_breaker(ground_fault_current, breaker_tripping_time=0.4):
    """
    Determine the required residential breaker size based on ground fault current.

    Parameters:
    - ground_fault_current (A): Ground fault current.
    - breaker_tripping_time (s): Breaker tripping time (default is 0.4s for TN-C-S).

    Returns:
    - Recommended breaker size (A).
    """
    return ground_fault_current  # Placeholder: More advanced protection criteria may apply

# -------------------------------
# User Input Section
# -------------------------------

print("Enter the details of the AC distribution system:")

# Collect user input for electrical system parameters
ac_conductor_type = input("Enter type of AC conductor (e.g., AAC, ACSR): ")
ac_load_size = float(input("Enter AC load size in watts (e.g., 5000 for 5 kW): "))
ac_voltage = float(input("Enter AC voltage in volts (e.g., 240): "))
percentage_voltage_drop = float(input("Enter allowable voltage drop percentage (e.g., 3): "))
conductor_length = float(input("Enter conductor length in meters, (Route length (e.g., 400)): "))  # One-way length
power_factor = float(input("Enter the power factor (e.g., 0.8 for residential loads): "))
ground_impedance = float(input("Enter the maximum ground impedance in ohms (e.g., 10): "))

# Dictionary of resistivity values for different conductor types (in Ω·m)
conductors_resistivity = {
    "AAC": 2.82e-8,  # All-Aluminum Conductor
    "ACSR": 1.75e-8   # Aluminum Conductor Steel Reinforced
}

# Retrieve resistivity for the selected conductor type, or default to AAC
if ac_conductor_type in conductors_resistivity:
    resistivity = conductors_resistivity[ac_conductor_type]
else:
    print("Conductor type not recognized. Using default resistivity for AAC.")
    resistivity = conductors_resistivity["AAC"]

# -------------------------------
# Calculations
# -------------------------------

# Compute various parameters
load_current = calculate_load_current(ac_load_size, ac_voltage, power_factor)
voltage_drop = calculate_voltage_drop(ac_voltage, percentage_voltage_drop)
conductor_resistance = calculate_conductor_resistance(voltage_drop, load_current)  # Round-trip resistance
conductor_area = calculate_conductor_area(resistivity, conductor_length, conductor_resistance)  # Required conductor area
breaker_rating = calculate_breaker_rating(load_current)  # Breaker selection
power_loss = calculate_power_loss(load_current, conductor_resistance)  # Power loss due to resistance
efficiency = calculate_efficiency(ac_load_size, ac_load_size + power_loss)  # System efficiency

# Compute ground fault parameters
ground_fault_current = calculate_ground_fault_current(ac_voltage, ground_impedance)
residential_breaker_size = calculate_residential_breaker(ground_fault_current)

# Convert conductor cross-sectional area from m² to mm² for practical use
conductor_area_mm2 = conductor_area * 1e6  # Convert from square meters to square millimeters

# -------------------------------
# Output Results
# -------------------------------

print("\nResults:")
print(f"Load Current: {load_current:.2f} A")  # Load current
print(f"Maximum Voltage Drop: {voltage_drop:.2f} V")  # Voltage drop
print(f"Conductor Resistance (Round Trip): {conductor_resistance:.4f} Ω")  # Total conductor resistance
print(f"Required Conductor Cross-Sectional Area: {conductor_area_mm2:.2f} mm²")  # Conductor size
print(f"Recommended Breaker Rating: {breaker_rating:.2f} A")  # Recommended breaker size
print(f"Power Loss in Conductors: {power_loss:.2f} W")  # Power loss
print(f"Total AC Network Efficiency: {efficiency:.2f}%")  # System efficiency
print(f"Ground Fault Current: {ground_fault_current:.2f} A")  # Fault current during grounding faults
print(f"Residential Breaker Size for TN-C-S System :kAIC (kiloampere Interrupting Capacity): {residential_breaker_size:.2f} A")  # Ground fault protection breaker

