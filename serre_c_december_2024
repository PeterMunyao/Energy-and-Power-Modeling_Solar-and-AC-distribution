import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1. Load the CSV data
file_path = 'csv_40.886273_23.912687_fixed_23_180_PT5M.csv'  # Path to the CSV file
df = pd.read_csv(file_path)  # Read the CSV data into a DataFrame

# 2. Data Preprocessing
# Convert 'period_end' to datetime objects and set as index
df['period_end'] = pd.to_datetime(df['period_end'])  # Convert the 'period_end' column to datetime
df.set_index('period_end', inplace=True)  # Set 'period_end' as the DataFrame index

# Ensure all required columns are present. Fill missing with 0.
required_columns = ['dni', 'ghi', 'dhi', 'air_temp', 'albedo', 'zenith', 'azimuth']  # Required columns for the calculations
for col in required_columns:
    if col not in df.columns:
        print(f"Warning: Column '{col}' is missing in CSV. Calculations may be inaccurate.")
        df[col] = 0  # Use 0 as default for missing columns

# 3. System Design Parameters (Example Values - Adjust as needed)
panel_power_max = 390  # Maximum panel power (in Watts)
panel_area = 1.6  # Area of each panel (in m^2)
system_capacity_mw = 1  # System capacity in MW
system_capacity = system_capacity_mw * 1000000  # Convert to watts
num_panels = int(system_capacity / panel_power_max)  # Calculate the number of panels

surface_tilt = 25  # Tilt of the solar panels (in degrees)
surface_azimuth = 180  # Azimuth of the solar panels (in degrees, South-facing)

temp_coeff = -0.0045  # Temperature coefficient (%/°C)
nominal_operating_cell_temp = 45  # Nominal operating cell temperature (°C)
inverter_efficiency = 0.86  # Efficiency of the inverter
stc_irradiance = 1000  # Standard Test Conditions irradiance (in W/m^2)

# 4. Filter for December (Extract data for the month of December)
december_data = df[df.index.month == 12].copy()  # Create a copy to avoid SettingWithCopyWarning

# 5. Solar Geometry (Simplified - Assumes Fixed Tilt)
# Convert angles to radians for calculations
surface_tilt_rad = np.radians(surface_tilt)
surface_azimuth_rad = np.radians(surface_azimuth)
azimuth_rad = np.radians(december_data['azimuth'])
zenith_rad = np.radians(december_data['zenith'])

# Angle of incidence calculation
aoi = np.degrees(np.arccos(np.cos(zenith_rad) * np.cos(surface_tilt_rad) +
                                  np.sin(zenith_rad) * np.sin(surface_tilt_rad) *
                                  np.cos(azimuth_rad - surface_azimuth_rad)))

aoi = np.clip(aoi, 0, 90)  # Clip results as after 90 degrees, power is cut off

# 6. Irradiance Calculations
# Calculate beam irradiance on the tilted surface
december_data['poa_direct'] = december_data['dni'] * np.cos(np.radians(aoi))  # Direct component of irradiance
december_data['poa_direct'] = december_data['poa_direct'].clip(lower=0)  # Ensure values are positive

# Calculate diffuse irradiance on the tilted surface
december_data['poa_diffuse'] = december_data['dhi'] * (1 + np.cos(surface_tilt_rad)) / 2

# Calculate reflected irradiance from the ground on the tilted surface
december_data['poa_sky_diffuse'] = december_data['ghi'] * december_data['albedo'] * (1 - np.cos(surface_tilt_rad)) / 2

# Total irradiance on the tilted surface (sum of all components)
december_data['poa_total'] = december_data['poa_direct'] + december_data['poa_diffuse'] + december_data['poa_sky_diffuse']

# 7. Module Temperature (Simplified)
# Estimate module temperature based on the irradiance and air temperature
december_data['module_temp'] = nominal_operating_cell_temp + december_data['poa_total'] / 800 * (28 - december_data['air_temp'])

# 8. Power Output
# Calculate panel power considering temperature effects
december_data['panel_power'] = panel_power_max * (1 + temp_coeff * (december_data['module_temp'] - nominal_operating_cell_temp))
december_data['dc_power'] = december_data['panel_power'] * december_data['poa_total'] / stc_irradiance  # DC output

# 9. Inverter
# Calculate AC power using inverter efficiency
december_data['ac_power'] = december_data['dc_power'] * inverter_efficiency

# Scale up the power based on the number of panels
december_data['scaled_power'] = december_data['ac_power'] * num_panels

# 10. December Energy (Sum of daily energy production)
december_energy_kwh = december_data['scaled_power'].resample('D').sum() / 1000  # Daily energy in kWh
total_december_energy_mwh = december_energy_kwh.sum() / 1000  # Total energy in MWh
print(f"Total power output for December: {total_december_energy_mwh:.2f} MWh")

# 11. Plotting (Plot daily energy production for December)
plt.figure(figsize=(12, 6))  # Set figure size
plt.plot(december_energy_kwh.index, december_energy_kwh, label="Daily Energy Production (kWh) in December")
plt.xlabel("Date")  # Label for x-axis
plt.ylabel("Energy (kWh)")  # Label for y-axis
plt.title("PV System Daily Energy Production in December")  # Title for the plot
plt.grid(True)  # Show grid
plt.legend()  # Show legend
plt.tight_layout()  # Ensure everything fits without overlapping

# Save the plot as a PDF file
plt.savefig("serre_c_december_2024.pdf", format="pdf")

# Show the plot
plt.show()
