import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# Set Garamond font and font size
plt.rcParams['font.family'] = 'Garamond'
plt.rcParams.update({'font.size': 14})  # Set default font size for all text elements

# Load the CSV data
file_path = 'csv_-1.11665_36.92927_fixed_23_0_PT5M_2024.csv'
df = pd.read_csv(file_path)

# Convert 'period_end' to datetime and set as index
df['period_end'] = pd.to_datetime(df['period_end'])
df.set_index('period_end', inplace=True)

# Ensure all required columns exist
required_columns = ['dni', 'ghi', 'dhi', 'air_temp', 'albedo', 'zenith', 'azimuth']
for col in required_columns:
    if col not in df.columns:
        print(f"Warning: Column '{col}' is missing. Using default value 0.")
        df[col] = 0

# System Design Parameters
panel_power_max = 350  # Watts
panel_area = 1.6  # m^2
total_area = 40  # m^2
num_panels = int(total_area / panel_area)

# Define tilt angles to analyze
tilt_angles = [0, 3, 22.5, 30, 45, 60, 80, 90]
surface_azimuth = 180  # South-facing panels

# Initialize dictionary to store results
energy_results = {}
yearly_energy_kwh_results = {}

for tilt in tilt_angles:
    tilt_rad = np.radians(tilt)
    azimuth_rad = np.radians(df['azimuth'])
    zenith_rad = np.radians(df['zenith'])
    surface_azimuth_rad = np.radians(surface_azimuth)
    
    # Angle of incidence
    aoi = np.degrees(np.arccos(np.cos(zenith_rad) * np.cos(tilt_rad) +
                                np.sin(zenith_rad) * np.sin(tilt_rad) *
                                np.cos(azimuth_rad - surface_azimuth_rad)))
    aoi = np.clip(aoi, 0, 90)
    
    # Irradiance components
    df['poa_direct'] = df['dni'] * np.cos(np.radians(aoi))
    df['poa_direct'] = df['poa_direct'].clip(lower=0)
    df['poa_diffuse'] = df['dhi'] * (1 + np.cos(tilt_rad)) / 2
    df['poa_sky_diffuse'] = df['ghi'] * df['albedo'] * (1 - np.cos(tilt_rad)) / 2
    df['poa_total'] = df['poa_direct'] + df['poa_diffuse'] + df['poa_sky_diffuse']
    
    # Module temperature
    nominal_operating_cell_temp = 45
    df['module_temp'] = nominal_operating_cell_temp + df['poa_total'] / 800 * (28 - df['air_temp'])
    
    # Power output
    temp_coeff = -0.0045
    df['panel_power'] = panel_power_max * (1 + temp_coeff * (df['module_temp'] - nominal_operating_cell_temp))
    stc_irradiance = 1000
    df['dc_power'] = df['panel_power'] * df['poa_total'] / stc_irradiance
    
    # Inverter efficiency
    inverter_efficiency = 0.85
    df['ac_power'] = df['dc_power'] * inverter_efficiency
    df['scaled_power'] = df['ac_power'] * num_panels  # Power in W

    # Convert 5-Minute Power to Energy (kWh)
    df['energy_kwh'] = df['scaled_power'] * (5 / 60) / 1000  # Energy in kWh (5 minutes = 5/60 hour)

    # Store full-resolution energy for plotting
    energy_results[tilt] = df['energy_kwh']
    
    # Calculate total yearly energy in kWh for each tilt
    yearly_energy_kwh = df['energy_kwh'].sum()
    yearly_energy_kwh_results[tilt] = yearly_energy_kwh

# Plot results at 5-minute resolution with default font
plt.figure(figsize=(12, 6))

# Plot each tilt energy production
for tilt, energy in energy_results.items():
    linestyle = '--' if tilt in [22.5, 45, 60, 80] else '-'  # Different styles for different tilts
    plt.plot(energy.index, energy, linestyle, label=f"Tilt {tilt}°")

# Set labels and title
plt.xlabel("Time", fontsize=16)
plt.ylabel("Energy (kWh per 5 minute resolution)", fontsize=16)
plt.title("Energy Production: Year 2024 at Different Tilt Angles (Azimuth 180°) Njagu-Mhasibu-Ruiru Estate", fontsize=16)
plt.grid(True)

# Adjust legend position
plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1), borderaxespad=0.)

# Add yearly energy output below the legend (smaller font size)
text_x_position = 1.05
text_y_position = 0.4  # Adjust this based on your graph's height
for tilt, yearly_energy_kwh in yearly_energy_kwh_results.items():
    plt.text(text_x_position, text_y_position, f"Tilt {tilt}°: {yearly_energy_kwh:.2f} kWh", 
             transform=plt.gca().transAxes, fontsize=10, verticalalignment='bottom')
    text_y_position -= 0.05  # Slightly adjust y-position for next text

plt.subplots_adjust(right=0.8)

# Save and show the plot
plt.savefig("ENERGY_NJAGU_5min_resolution_with_yearly_output.pdf", format="pdf", bbox_inches="tight")
plt.show()
