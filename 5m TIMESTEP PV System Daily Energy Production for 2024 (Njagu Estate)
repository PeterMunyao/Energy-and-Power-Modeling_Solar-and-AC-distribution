import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1. Load the CSV data
file_path = 'csv_-1.11665_36.92927_fixed_23_0_PT5M_2024.csv'  # Path to the CSV file
df = pd.read_csv(file_path)  # Read the CSV data into a DataFrame

# 2. Data Preprocessing
# Convert 'period_end' to datetime objects and set as index
df['period_end'] = pd.to_datetime(df['period_end'])  # Convert the 'period_end' column to datetime
df.set_index('period_end', inplace=True)  # Set 'period_end' as the DataFrame index

# Convert from UTC to Kenya Time (UTC +3)
df.index = df.index + pd.Timedelta(hours=3)  # Adjust the index to Kenya Time (EAT)

# Ensure all required columns are present. Fill missing with 0.
required_columns = ['dni', 'ghi', 'dhi', 'air_temp', 'albedo', 'zenith', 'azimuth']  # Required columns for the calculations
for col in required_columns:
    if col not in df.columns:
        print(f"Warning: Column '{col}' is missing in CSV. Calculations may be inaccurate.")
        df[col] = 0  # Use 0 as default for missing columns

# 3. System Design Parameters (Example Values - Adjust as needed)
panel_power_max = 350  # Maximum panel power (in Watts)
panel_area = 1.6  # Area of each panel (in m^2)
total_area = 40  # Total available area for solar panels in m^2

# 4. Calculate number of panels based on available area
num_panels = total_area / panel_area  # Total number of panels
num_panels = int(num_panels)  # Round to the nearest whole number

# 5. Calculate system capacity (in Watts and kW)
system_capacity_watts = num_panels * panel_power_max  # Total system capacity in Watts
system_capacity_kw = system_capacity_watts / 1000  # Convert to kW

# Display the system capacity and number of panels
print(f"Number of panels: {num_panels}")
print(f"System capacity: {system_capacity_kw:.2f} kW")

# 6. Solar Geometry (Simplified - Assumes Fixed Tilt)
surface_tilt = 22.5  # Tilt of the solar panels (in degrees)
surface_azimuth = 90  # Azimuth of the solar panels (in degrees, South-facing)

# Convert angles to radians for calculations
surface_tilt_rad = np.radians(surface_tilt)
surface_azimuth_rad = np.radians(surface_azimuth)
azimuth_rad = np.radians(df['azimuth'])
zenith_rad = np.radians(df['zenith'])

# Angle of incidence calculation
aoi = np.degrees(np.arccos(np.cos(zenith_rad) * np.cos(surface_tilt_rad) +
                                  np.sin(zenith_rad) * np.sin(surface_tilt_rad) *
                                  np.cos(azimuth_rad - surface_azimuth_rad)))

aoi = np.clip(aoi, 0, 90)  # Clip results as after 90 degrees, power is cut off

# 7. Irradiance Calculations
# Calculate beam irradiance on the tilted surface
df['poa_direct'] = df['dni'] * np.cos(np.radians(aoi))  # Direct component of irradiance
df['poa_direct'] = df['poa_direct'].clip(lower=0)  # Ensure values are positive

# Calculate diffuse irradiance on the tilted surface
df['poa_diffuse'] = df['dhi'] * (1 + np.cos(surface_tilt_rad)) / 2

# Calculate reflected irradiance from the ground on the tilted surface
df['poa_sky_diffuse'] = df['ghi'] * df['albedo'] * (1 - np.cos(surface_tilt_rad)) / 2

# Total irradiance on the tilted surface (sum of all components)
df['poa_total'] = df['poa_direct'] + df['poa_diffuse'] + df['poa_sky_diffuse']

# 8. Module Temperature (Simplified)
# Estimate module temperature based on the irradiance and air temperature
nominal_operating_cell_temp = 45  # Nominal operating cell temperature (°C)
df['module_temp'] = nominal_operating_cell_temp + df['poa_total'] / 800 * (28 - df['air_temp'])

# 9. Power Output
# Calculate panel power considering temperature effects
temp_coeff = -0.0045  # Temperature coefficient (%/°C)
df['panel_power'] = panel_power_max * (1 + temp_coeff * (df['module_temp'] - nominal_operating_cell_temp))
stc_irradiance = 1000  # Standard Test Conditions irradiance (in W/m^2)
df['dc_power'] = df['panel_power'] * df['poa_total'] / stc_irradiance  # DC output

# 10. Inverter
# Calculate AC power using inverter efficiency
inverter_efficiency = 0.85  # Efficiency of the inverter
df['ac_power'] = df['dc_power'] * inverter_efficiency

# Scale up the power based on the number of panels
df['scaled_power'] = df['ac_power'] * num_panels

# 11. Energy Calculation (5-minute intervals to hourly energy)
df['Energy_kWh'] = (df['scaled_power'] * 5 / 60) / 1000  # Convert from Watts to kWh (5 min to hour)

# 12. Hourly Energy Calculation (Summing 5-minute energy intervals to get hourly energy)
# Sum the energy for the 5-minute intervals within each hour
df['Hourly_Energy_kWh'] = df['Energy_kWh'].resample('h').sum()  # Sum for hourly energy in kWh

# Check if there are any missing values in the 'Hourly_Energy_kWh' column
df['Hourly_Energy_kWh'].fillna(0, inplace=True)  # Fill any NaN values with 0

# 13. Plotting Energy

plt.figure(figsize=(12, 5))  # Set figure size

plt.plot(df['Hourly_Energy_kWh'].index, df['Hourly_Energy_kWh'], color='blue', label="Hourly Energy (kWh)")
plt.xlabel("Date", fontsize=16 )  # Label for x-axis
plt.ylabel("Energy (kWh)", fontsize=16)  # Label for y-axis
plt.title("Daily Solar Energy Production computed at 5 Minutes Resolution at Njagu_Mhasibu_Estate 2024", fontsize=16)  # Title for the plot
plt.grid(True)  # Show grid
plt.legend()  # Show legend

# Adjust layout
plt.tight_layout()

# Save the plot as a PDF file
plt.savefig("Njagu_Mhasibu_Estate_Daily Energy 5 Minutes Resolution", format="pdf")

# Show the plot
plt.show()

# Display results
print(f"System Capacity: {system_capacity_kw:.2f} kW")
print(f"Total Hourly Energy (kWh): {df['Hourly_Energy_kWh'].sum():.2f} kWh")
